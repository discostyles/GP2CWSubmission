#include "GameApplication.h"

GameApplication::GameApplication()
{
	CREATELOG("log.txt");
	m_WindowWidth = 640;
	m_WindowHeight = 480;
	m_WindowCreationFlags = SDL_WINDOW_OPENGL;
	m_WindowTitle = "Game";
	m_pWindow = nullptr;
	m_bIsRunning = false;
}

GameApplication::~GameApplication()
{
  CLOSELOG();
}

void GameApplication::createWindow(const string& windowTitle, const unsigned int width, const unsigned int height, const unsigned int windowFlags)
{
	m_pWindow = SDL_CreateWindow(windowTitle.c_str(),	// window title
		25,					// x position
		25,					// y position
		width,				// width in pixels
		height,				// height in pixels 
		windowFlags);		//flags
}

void GameApplication::parseConfig(int args,char * arg[])
{
	stringstream ss;
	//parse config file
	XMLOptionsParser xmlParser=XMLOptionsParser("settings.xml");
	xmlParser.parse(m_Options);
	ss<<m_Options;
	LOG(INFO,"Settings Parsed\n%s",ss.str().c_str());
	ss.str( std::string());
	ss.clear();
	//parse command line arguments into keyvalue pairs, this should
	//overide options in config files
	CommandLineParser commandLineParser=CommandLineParser(args,arg);
	commandLineParser.parse(m_Options);
	ss<<m_Options;
	LOG(INFO,"Command Line Parsed\n%s",ss.str().c_str());
	ss.str( std::string());
	ss.clear();
}


bool GameApplication::init(int args,char * arg[])
{
	parseConfig(args,arg);
	//init everything - SDL, if it is nonzero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		LOG(ERROR, "SDL can't be initialised %s", SDL_GetError());
		return false;
	}
	m_WindowWidth = m_Options.getOptionAsInt("WindowWidth");
	m_WindowHeight = m_Options.getOptionAsInt("WindowHeight");
	m_WindowTitle = m_Options.getOption("WindowTitle");
	createWindow(m_WindowTitle, m_WindowWidth, m_WindowHeight, m_WindowCreationFlags);
	initGraphics();
	initScene();



	m_bIsRunning = true;
	return true;
}


void GameApplication::run()
{
	// value to hold the event generated by SDL
	SDL_Event event;
	// game loop
	while (m_bIsRunning)
	{
		// while we still have events in the queue 
		while (SDL_PollEvent(&event))
		{
			// get event type
			if (event.type == SDL_QUIT)
			{
				onQuit();
			}
			if (event.type == SDL_KEYDOWN)
			{
				onKeyDown(event.key.keysym.sym);
			}
		}
		update();
		onBeginRender();
		render();
		onEndRender();
	}
}

void GameApplication::onBeginRender()
{
	//set the clear colour (background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the colour and depth buffer

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//glClearStencil(0);
	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

	//glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
	//glDepthMask(GL_FALSE);
	//glEnable(GL_STENCIL_TEST);

	//glStencilFunc(GL_ALWAYS, 1, 0xFFFFFFFF);
	//glStencilOp(GL_REPLACE, GL_REPLACE, GL_REPLACE);

}

void GameApplication::onEndRender()
{
	SDL_GL_SwapWindow(m_pWindow);
}

void GameApplication::render()
{
}

void GameApplication::update()
{
}

void GameApplication::onQuit()
{
	destroyScene();
	SDL_GL_DeleteContext(m_GLcontext);
	m_bIsRunning = false;
	SDL_DestroyWindow(m_pWindow);
	IMG_Quit();
	SDL_Quit();
}

void GameApplication::initGraphics()
{
	//OpenGL Context
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
	m_GLcontext = SDL_GL_CreateContext(m_pWindow);

	//GLEW
	glewExperimental = GL_TRUE;

	GLenum err = glewInit();

	if (GLEW_OK != err)
	{
		LOG(ERROR, "Error: %s", glewGetErrorString(err));
	}

	//OpenGL states
	//Smooth shading
	glShadeModel(GL_SMOOTH);

	//clear the background to black
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

	//clear the depth buffer to 1.0
	glClearDepth(1.0f);

	//enable depth testing
	glEnable(GL_DEPTH_TEST);

	//the depth test to use
	glDepthFunc(GL_LEQUAL);

	//turn on the best perspective correction
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

	//set our viewport 
	setViewport((int)m_WindowWidth, (int)m_WindowHeight);

}

void GameApplication::setViewport(int width, int height)
{
	//screen ratio
	GLfloat ratio;

	//make sure height is always above 1
	if (height == 0)
	{
		height = 1;
	}

	//calculate screen ratio
	ratio = (GLfloat)width / (GLfloat)height;

	//setup viewport
	glViewport(0, 0, (GLsizei)width, (GLsizei)height);
}

void GameApplication::initScene()
{
}

void GameApplication::destroyScene()
{
}

void GameApplication::onKeyDown(SDL_Keycode keyCode)
{

}

void GameApplication::CollisionDetected()
{
	
}
